<!doctype html>
<html lang="fr">
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Capture Webcam → FastAPI</title>
<style>
  :root{
    --bg1:#f8fafc; --bg2:#eef2ff;
    --card:rgba(255,255,255,.55);
    --stroke:rgba(255,255,255,.4);
    --text:#0f172a;
    --muted:#64748b;
    --accent:#6366f1;
    --accent-2:#22c55e;
    --danger:#ef4444;
    --shadow:0 10px 30px rgba(2,6,23,.15);
    --glass: blur(12px) saturate(130%);
    --radius:16px;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{
    margin:0; font-family:Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial;
    color:var(--text);
    background: radial-gradient(1200px 800px at 20% 10%, var(--bg2), transparent 60%),
                radial-gradient(1200px 800px at 80% 90%, #e0f2fe, transparent 60%),
                linear-gradient(180deg, #fff, #f8fafc 60%);
    display:grid; place-items:center; padding:24px;
  }
  .wrap{max-width:980px; width:100%}
  header{margin-bottom:16px; text-align:center}
  h1{margin:0 0 6px; font-weight:700; letter-spacing:.2px}
  p.sub{margin:0; color:var(--muted)}
  .grid{
    display:grid; gap:20px;
    grid-template-columns: 1.2fr .8fr;
  }
  .card{
    background:var(--card); border:1px solid var(--stroke); border-radius:var(--radius);
    box-shadow:var(--shadow); backdrop-filter:var(--glass);
  }
  .stage{position:relative; aspect-ratio:4/3; overflow:hidden}
  .stage video,.stage canvas{
    position:absolute; inset:0; width:100%; height:100%; object-fit:cover; border-radius:var(--radius);
  }
  .mirror { transform: scaleX(-1); transform-origin:center; }
  .hud{
    position:absolute; inset:auto 0 0 0; display:flex; gap:10px; justify-content:center;
    padding:14px; background:linear-gradient(180deg, rgba(3,7,18,0) 0%, rgba(3,7,18,.35) 70%);
  }
  .btn{
    appearance:none; border:1px solid transparent; background:#fff; color:#0f172a;
    padding:10px 14px; border-radius:12px; font-weight:600; cursor:pointer;
    box-shadow:0 6px 16px rgba(2,6,23,.1); transition:.18s transform, .18s box-shadow, .18s background, .18s color, .18s border;
    display:inline-flex; align-items:center; gap:10px;
  }
  .btn svg{width:18px; height:18px}
  .btn:hover{transform:translateY(-1px); box-shadow:0 10px 24px rgba(2,6,23,.18)}
  .btn:disabled{opacity:.5; cursor:not-allowed; transform:none; box-shadow:none}
  .btn.primary{background:var(--accent); color:#fff}
  .btn.green{background:var(--accent-2); color:#fff}
  .btn.outline{background:transparent; color:var(--text); border-color:rgba(99,102,241,.35)}
  .btn.danger{background:var(--danger); color:#fff}
  .panel{padding:16px}
  .meta{display:flex; gap:10px; flex-wrap:wrap; color:var(--muted); font-size:13px}
  .tag{padding:6px 10px; border-radius:999px; background:rgba(99,102,241,.08); border:1px dashed rgba(99,102,241,.35)}
  .preview{display:grid; gap:12px; padding:16px}
  .shot{width:100%; aspect-ratio:4/3; object-fit:cover; border-radius:12px; border:1px solid var(--stroke)}
  .row{display:flex; gap:10px; flex-wrap:wrap; align-items:center}
  .divider{height:1px; background:var(--stroke); margin:12px 0}
  .reticle{
    position:absolute; inset:14% 14%; border:2px solid rgba(255,255,255,.65);
    border-radius:12px; box-shadow:inset 0 0 0 1px rgba(15,23,42,.15);
    pointer-events:none;
  }
  .flash{position:absolute; inset:0; background:#fff; opacity:0; pointer-events:none}
  .flash.active{animation:flash .26s ease}
  @keyframes flash{0%{opacity:.0} 10%{opacity:.85} 100%{opacity:0}}
  footer{margin-top:14px; text-align:center; color:var(--muted); font-size:12px}
  .resp{font:13px/1.35 ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace; color:#0f172a; white-space:pre-wrap; background:rgba(15,23,42,.04); border:1px dashed var(--stroke); border-radius:10px; padding:10px}
  @media (max-width: 900px){ .grid{grid-template-columns:1fr} }
</style>

<div class="wrap">
  <header>
    <h1>Capture Webcam → FastAPI</h1>
    <p class="sub">Ouvrez la caméra, capturez une image, puis envoyez-la à votre endpoint FastAPI.</p>
  </header>

  <div class="grid">
    <!-- CAMÉRA -->
    <section class="card">
      <div class="stage">
        <video id="video" class="mirror" playsinline autoplay muted></video>
        <canvas id="overlay" class="mirror" aria-hidden="true"></canvas>
        <div class="reticle"></div>
        <div class="flash" id="flash"></div>
        <div class="hud">
          <button id="btnOpen" class="btn outline">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-width="2" d="M4 7h3l2-3h6l2 3h3a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2z"/><circle cx="12" cy="13" r="4" stroke-width="2"/></svg>
            Ouvrir
          </button>
          <button id="btnSnap" class="btn primary" disabled>
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="12" r="8" stroke-width="2"/></svg>
            Prendre une photo
          </button>
          <button id="btnClose" class="btn danger" disabled>
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-width="2" d="M6 18 18 6M6 6l12 12"/></svg>
            Fermer
          </button>
        </div>
      </div>
      <div class="panel">
        <div class="meta">
          <span id="res" class="tag">Résolution: —</span>
          <span id="cam" class="tag">Caméra: —</span>
          <span id="api" class="tag">API: <code id="apiUrlTag">http://localhost:8000/predict</code></span>
        </div>
      </div>
    </section>

    <!-- PRÉVISUALISATION + ENVOI -->
    <aside class="card">
      <div class="preview">
        <div class="row">
          <button id="btnSend" class="btn green" disabled>
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-width="2" d="M4 12h14M14 6l6 6-6 6"/></svg>
            Envoyer à l’API
          </button>
          <button id="btnClear" class="btn">Effacer l’aperçu</button>
        </div>
        <div class="divider"></div>
        <img id="photo" class="shot" alt="Aucune capture pour l’instant" />
        <div id="respBox" class="resp" style="display:none;"></div>
      </div>
    </aside>
  </div>

  <footer> Penses à activer le CORS côté FastAPI pour autoriser ce domaine.</footer>
</div>

<script>
/* === CONFIG ===
   Change ici l'URL de ton endpoint FastAPI.
   Exemple FastAPI:
   @app.post("/predict")
   async def predict(file: UploadFile = File(...)): ...
*/
const API_URL = "http://localhost:8000/predict";

const video   = document.getElementById('video');
const overlay = document.getElementById('overlay');
const flash   = document.getElementById('flash');
const photo   = document.getElementById('photo');
const btnOpen = document.getElementById('btnOpen');
const btnSnap = document.getElementById('btnSnap');
const btnClose= document.getElementById('btnClose');
const btnClear= document.getElementById('btnClear');
const btnSend = document.getElementById('btnSend');
const res     = document.getElementById('res');
const cam     = document.getElementById('cam');
const respBox = document.getElementById('respBox');
const apiUrlTag = document.getElementById('apiUrlTag');
apiUrlTag.textContent = API_URL;

let stream = null;
let lastBlob = null; // on garde la dernière capture pour l’envoi

function setBtns(open, snap, close){
  btnOpen.disabled = !open;
  btnSnap.disabled = !snap;
  btnClose.disabled= !close;
}

btnOpen.onclick = async () => {
  try {
    stream = await navigator.mediaDevices.getUserMedia({
      video: { facingMode: "environment" }, audio:false
    });
    video.srcObject = stream;
    await video.play();

    // Infos caméra
    const track = stream.getVideoTracks()[0];
    const s = track.getSettings?.() || {};
    res.textContent = `Résolution: ${s.width || video.videoWidth || '—'}×${s.height || video.videoHeight || '—'}`;
    cam.textContent = `Caméra: ${s.label || track.label || '—'}`;

    // Dimensionner l’overlay à l’affichage
    const ro = new ResizeObserver(() => {
      overlay.width  = video.clientWidth;
      overlay.height = video.clientHeight;
      drawOverlay();
    });
    ro.observe(video);

    setBtns(false, true, true);
  } catch (e) {
    alert("Accès caméra refusé ou indisponible : " + e.message);
  }
};

btnSnap.onclick = () => {
  if (!video.videoWidth) return;

  // Flash
  flash.classList.remove('active'); void flash.offsetWidth; flash.classList.add('active');

  // Capture non-miroir (conseillé pour dataset)
  const c = document.createElement('canvas');
  c.width  = video.videoWidth;
  c.height = video.videoHeight;
  const ctx = c.getContext('2d');
  ctx.drawImage(video, 0, 0, c.width, c.height);

  c.toBlob(b => {
    if (!b) return;
    lastBlob = b;
    const url = URL.createObjectURL(b);
    photo.src = url;
    btnSend.disabled = false;
    showResp(null); // clear
  }, 'image/png');
};

btnSend.onclick = async () => {
  if (!lastBlob) { alert("Aucune image à envoyer. Fais une capture d'abord."); return; }
  btnSend.disabled = true;
  const wasText = btnSend.textContent;
  btnSend.textContent = "Envoi en cours…";

  try {
    const fd = new FormData();
    // Clé 'file' côté FastAPI: file: UploadFile = File(...)
    fd.append('file', lastBlob, 'capture.png');

    const resp = await fetch(API_URL, {
      method: 'POST',
      body: fd,
      // Pas de 'Content-Type' manuel -> laissé à fetch/FormData
    });

    const contentType = resp.headers.get('content-type') || '';
    let payload;
    if (contentType.includes('application/json')) {
      payload = await resp.json();
    } else {
      payload = await resp.text();
    }

    if (!resp.ok) {
      showResp({ error: true, status: resp.status, body: payload });
    } else {
      showResp(payload);
    }
  } catch (e) {
    showResp({ error: true, message: e.message });
  } finally {
    btnSend.disabled = false;
    btnSend.textContent = wasText;
  }
};

btnClose.onclick = () => {
  if (stream) stream.getTracks().forEach(t => t.stop());
  video.srcObject = null;
  stream = null;
  res.textContent = "Résolution: —";
  cam.textContent = "Caméra: —";
  setBtns(true, false, false);
};

btnClear.onclick = () => {
  photo.removeAttribute('src');
  lastBlob = null;
  btnSend.disabled = true;
  showResp(null);
};

function showResp(data){
  if (!data){
    respBox.style.display = 'none';
    respBox.textContent = '';
    return;
  }
  respBox.style.display = 'block';
  try {
    respBox.textContent = typeof data === 'string' ? data : JSON.stringify(data, null, 2);
  } catch {
    respBox.textContent = String(data);
  }
}

// Dessin overlay (vignettage/repères)
function drawOverlay(){
  const ctx = overlay.getContext('2d');
  const {width:w, height:h} = overlay;
  ctx.clearRect(0,0,w,h);
  const g = ctx.createRadialGradient(w/2,h/2, Math.min(w,h)*.25, w/2,h/2, Math.max(w,h)*.65);
  g.addColorStop(0,'rgba(255,255,255,0)');
  g.addColorStop(1,'rgba(15,23,42,.25)');
  ctx.fillStyle=g; ctx.fillRect(0,0,w,h);
  ctx.strokeStyle='rgba(255,255,255,.25)'; ctx.lineWidth=1;
  ctx.beginPath();
  ctx.moveTo(w/2, h*.12); ctx.lineTo(w/2, h*.88);
  ctx.moveTo(w*.12, h/2); ctx.lineTo(w*.88, h/2);
  ctx.stroke();
}
</script>
</html>

